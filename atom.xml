<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>热浪编程</title>
  
  <subtitle>蒲东平的博客</subtitle>
  <link href="https://pudongping.github.io/atom.xml" rel="self"/>
  
  <link href="https://pudongping.github.io/"/>
  <updated>2024-08-02T08:45:14.909Z</updated>
  <id>https://pudongping.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一文弄懂Go语言的Context包，值得收藏！</title>
    <link href="https://pudongping.github.io/posts/f5eba23a.html"/>
    <id>https://pudongping.github.io/posts/f5eba23a.html</id>
    <published>2024-08-02T08:44:26.000Z</published>
    <updated>2024-08-02T08:45:14.909Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发高效且可维护的 Go 应用程序时，处理超时、取消操作和传递请求范围的数据变得至关重要。&lt;/p&gt;
&lt;p&gt;这时，Go 标准库中的 &lt;code&gt;context&lt;/code&gt; 包就显得尤其重要了，它提供了在不同 API</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Context" scheme="https://pudongping.github.io/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>通过IMAP协议使用Go语言解析邮件</title>
    <link href="https://pudongping.github.io/posts/60016311.html"/>
    <id>https://pudongping.github.io/posts/60016311.html</id>
    <published>2024-08-02T06:18:46.000Z</published>
    <updated>2024-08-02T06:20:18.906Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;电子邮件在现代通信中依然扮演着重要的角色。为了提升邮件处理的效率，使用编程语言进行自动化处理变得尤为重要。&lt;/p&gt;
&lt;p&gt;本文将详细介绍如何使用 Go 语言从 IMAP</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="IMAP" scheme="https://pudongping.github.io/tags/IMAP/"/>
    
  </entry>
  
  <entry>
    <title>如何借助Redis巧妙的管理用户签到？——Bitmap篇</title>
    <link href="https://pudongping.github.io/posts/fe86d4b2.html"/>
    <id>https://pudongping.github.io/posts/fe86d4b2.html</id>
    <published>2024-07-18T10:23:06.000Z</published>
    <updated>2024-07-18T10:25:01.550Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;数据管理和分析是任何大小项目的重要组成部分。在管理如用户签到数据这类信息时，我们通常追求的是高效性和存储节省。&lt;/p&gt;
&lt;p&gt;今天，让我们一起探索一种既节省空间又高效的数据管理方法——Redis 的位操作（Bit operations）。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="缓存" scheme="https://pudongping.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何借助Redis更高效统计UV？——Hyperloglog篇</title>
    <link href="https://pudongping.github.io/posts/ceb09f0b.html"/>
    <id>https://pudongping.github.io/posts/ceb09f0b.html</id>
    <published>2024-07-18T10:22:51.000Z</published>
    <updated>2024-07-18T10:25:01.552Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在今天的互联网时代，数据如潮水般汹涌而来。从用户行为数据、系统日志到实时交互数据，如何高效、准确地统计这海量数据中的唯一元素数量，成为了一个不小的挑战。&lt;/p&gt;
&lt;p&gt;今天，我们要一起探索的是 Redis</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="缓存" scheme="https://pudongping.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何在Redis中快速推算两地之间的距离？——Geo篇</title>
    <link href="https://pudongping.github.io/posts/9c96a9d2.html"/>
    <id>https://pudongping.github.io/posts/9c96a9d2.html</id>
    <published>2024-07-18T10:22:22.000Z</published>
    <updated>2024-07-18T10:25:01.555Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;处理地理位置数据已成为许多应用程序的核心需求。无论是推送附近的餐馆还是对全国范围内的服务点进行分析，快速而准确地处理和检索地理位置信息都至关重要。Redis，作为一种高性能的内存数据库，为我们提供了这样的解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 在</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="缓存" scheme="https://pudongping.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的map为什么默认不是并发安全的？</title>
    <link href="https://pudongping.github.io/posts/3761f660.html"/>
    <id>https://pudongping.github.io/posts/3761f660.html</id>
    <published>2024-07-11T16:51:29.000Z</published>
    <updated>2024-07-11T16:53:57.141Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天我们聊一个 Go 语言中的 “热门” 话题——为什么 &lt;strong&gt;Go 语言中的 map 默认不是并发安全&lt;/strong&gt;的呢？&lt;/p&gt;
&lt;p&gt;对于广大 Go 程序员来说，尤其是那些刚跨入 Go</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言map并发安全，互斥锁和读写锁谁更优？</title>
    <link href="https://pudongping.github.io/posts/35885ddd.html"/>
    <id>https://pudongping.github.io/posts/35885ddd.html</id>
    <published>2024-07-11T15:17:32.000Z</published>
    <updated>2024-07-11T16:53:57.140Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;并发编程是 Go 语言的一大特色，合理地使用锁对于保证数据一致性和提高程序性能至关重要。&lt;/p&gt;
&lt;p&gt;在处理并发控制时，&lt;code&gt;sync.Mutex&lt;/code&gt;（互斥锁）和</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="互斥锁" scheme="https://pudongping.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    
    <category term="锁" scheme="https://pudongping.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Go语言map并发安全使用的正确姿势</title>
    <link href="https://pudongping.github.io/posts/85f0ac00.html"/>
    <id>https://pudongping.github.io/posts/85f0ac00.html</id>
    <published>2024-07-11T15:17:15.000Z</published>
    <updated>2024-07-11T16:53:57.139Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在并发编程的世界里，&lt;code&gt;map&lt;/code&gt; 的使用随处可见。然而，当多个 goroutine 同时读写 map 时，如果不加以控制，很容易导致程序崩溃。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，我们通常有几种方法来保证对 map</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Nginx 与 Kong 的配置与实践</title>
    <link href="https://pudongping.github.io/posts/52ffe35e.html"/>
    <id>https://pudongping.github.io/posts/52ffe35e.html</id>
    <published>2024-07-11T15:16:54.000Z</published>
    <updated>2024-07-11T16:53:57.143Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代的微服务架构中，服务之间的通信和负载坐标成为了关键环节。这篇文章将深入探讨如何通过 Nginx 配置实现服务的负载均衡，同时如何利用 Kong API</summary>
        
      
    
    
    
    <category term="微服务" scheme="https://pudongping.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="KONG" scheme="https://pudongping.github.io/tags/KONG/"/>
    
    <category term="微服务" scheme="https://pudongping.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pudongping.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 KONG 带你玩转 API 网关</title>
    <link href="https://pudongping.github.io/posts/b8eafe4f.html"/>
    <id>https://pudongping.github.io/posts/b8eafe4f.html</id>
    <published>2024-07-11T15:16:39.000Z</published>
    <updated>2024-07-11T16:53:57.138Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在当今的软件开发中，API 网关已成为微服务架构中不可或缺的一环。它不仅简化了服务间的通信、提供了统一的入口，还能在安全、监控、限流等方面发挥巨大作用。&lt;/p&gt;
&lt;p&gt;今天，我们就来聊聊如何通过 Docker 快速部署 KONG —— 一个流行的开源 API</summary>
        
      
    
    
    
    <category term="微服务" scheme="https://pudongping.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="Docker" scheme="https://pudongping.github.io/tags/Docker/"/>
    
    <category term="KONG" scheme="https://pudongping.github.io/tags/KONG/"/>
    
    <category term="微服务" scheme="https://pudongping.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用 Protobuf 实现高效数据交换</title>
    <link href="https://pudongping.github.io/posts/7940debf.html"/>
    <id>https://pudongping.github.io/posts/7940debf.html</id>
    <published>2024-07-11T15:16:25.000Z</published>
    <updated>2024-07-11T16:53:57.142Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在当今的软件开发领域，数据传输的效率和格式化方式尤为关键。Google 开发的 &lt;strong&gt;Protocol Buffers(Protobuf)&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="微服务" scheme="https://pudongping.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://pudongping.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Protobuf" scheme="https://pudongping.github.io/tags/Protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Go语言设计模式：使用Option模式简化类的初始化</title>
    <link href="https://pudongping.github.io/posts/d24ea952.html"/>
    <id>https://pudongping.github.io/posts/d24ea952.html</id>
    <published>2024-07-09T14:56:04.000Z</published>
    <updated>2024-07-09T15:11:36.548Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在面向对象编程中，当我们需要创建一个构造参数众多的类时，不仅使得代码难以阅读，而且在参数较多时，调用者需要记住每个参数的顺序和类型，这无疑增加了使用的复杂性，代码往往变得难以管理。&lt;/p&gt;
&lt;p&gt;Go</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言性能优化技巧</title>
    <link href="https://pudongping.github.io/posts/2a37659b.html"/>
    <id>https://pudongping.github.io/posts/2a37659b.html</id>
    <published>2024-07-09T14:55:36.000Z</published>
    <updated>2024-07-09T15:11:36.546Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在软件开发中，性能往往是我们需要特别关注的方面之一。对于使用 Go 语言的开发者而言，如何编写高性能的代码是一个重要的考虑点。&lt;/p&gt;
&lt;p&gt;今天，我将分享一些在 Go 语言开发中可以采取的性能优化策略，希望能帮助大家写出更高效的程序。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Go 中的单例模式</title>
    <link href="https://pudongping.github.io/posts/1b8de6f.html"/>
    <id>https://pudongping.github.io/posts/1b8de6f.html</id>
    <published>2024-07-08T04:10:43.000Z</published>
    <updated>2024-07-08T04:21:12.579Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;单例模式在软件开发中是一种常见的设计模式，用于确保一个类在任何情况下都仅有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，实现单例模式通常有两种方式：&lt;strong&gt;饿汉式&lt;/strong&gt; 和</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go 项目自动重载解决方案 —— Air 使用入门</title>
    <link href="https://pudongping.github.io/posts/2968883c.html"/>
    <id>https://pudongping.github.io/posts/2968883c.html</id>
    <published>2024-07-08T04:09:33.000Z</published>
    <updated>2024-07-08T04:21:12.577Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发 Go 应用程序时，我们经常需要重启应用来加载最新的代码更改。这个过程虽然简单，但重复的操作会降低我们的开发效率。&lt;/p&gt;
&lt;p&gt;今天，我们要介绍的工具 —— &lt;strong&gt;Air&lt;/strong&gt;，</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>使用 Makefile 管理和部署 Go 项目</title>
    <link href="https://pudongping.github.io/posts/926b9d4b.html"/>
    <id>https://pudongping.github.io/posts/926b9d4b.html</id>
    <published>2024-07-05T08:13:17.000Z</published>
    <updated>2024-07-05T08:14:24.926Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在软件开发的世界里，自动化是提升效率的关键。&lt;code&gt;Makefile&lt;/code&gt; 尽管是一个历史悠久的工具，但它在任务管理和自动化方面的能力依然不可小觑。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;Go&lt;/code&gt; 语言项目来说，利用</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Makefile" scheme="https://pudongping.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>如何有效提升 API 接口的安全性？</title>
    <link href="https://pudongping.github.io/posts/5edede5c.html"/>
    <id>https://pudongping.github.io/posts/5edede5c.html</id>
    <published>2024-07-04T15:00:08.000Z</published>
    <updated>2024-07-04T15:01:11.543Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在如今的互联网应用中，API 接口的安全性已经成为了开发过程中不可忽视的一环。越来越多的应用服务通过 API 进行数据交换，而 API 的安全性直接关系到应用的数据安全与用户隐私。因此，我们需要采取一系列措施来确保 API 的安全。&lt;/p&gt;
&lt;p&gt;本文将教你如何通过</summary>
        
      
    
    
    
    <category term="科普" scheme="https://pudongping.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="安全" scheme="https://pudongping.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你玩转 Nginx 配置</title>
    <link href="https://pudongping.github.io/posts/40e3643a.html"/>
    <id>https://pudongping.github.io/posts/40e3643a.html</id>
    <published>2024-07-03T03:01:00.000Z</published>
    <updated>2024-07-03T03:12:31.040Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代的互联网应用中，Nginx 已经成为了不可或缺的组成部分。无论是作为静态资源服务器、反向代理服务器、还是负载均衡器，Nginx 的高性能和灵活配置都让它备受青睐。&lt;/p&gt;
&lt;p&gt;本文将以简单、易懂的语言和实例，详细介绍几种常见的 Nginx</summary>
        
      
    
    
    
    <category term="Nginx" scheme="https://pudongping.github.io/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="https://pudongping.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>多机部署：打造内网服务器集群</title>
    <link href="https://pudongping.github.io/posts/9a124193.html"/>
    <id>https://pudongping.github.io/posts/9a124193.html</id>
    <published>2024-07-03T03:00:41.000Z</published>
    <updated>2024-07-03T03:12:31.038Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在当今这个信息爆炸的时代，多机部署已经成为许多大型应用不可或缺的一部分。但是，对于很多刚刚接触服务器管理和网络部署的新手来说，多机部署可能听起来就像是一门深不可测的技术。&lt;/p&gt;
&lt;p&gt;别担心，今天就让我带你一起轻松学习如何在同一内网的不同服务器之间进行连接。&lt;/p&gt;
&lt;p</summary>
        
      
    
    
    
    <category term="科普" scheme="https://pudongping.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="服务器集群" scheme="https://pudongping.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Tmux 快速入门：提高终端管理效率的必备技能</title>
    <link href="https://pudongping.github.io/posts/bb0f40eb.html"/>
    <id>https://pudongping.github.io/posts/bb0f40eb.html</id>
    <published>2024-07-02T07:31:02.000Z</published>
    <updated>2024-07-02T07:32:09.837Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在日常的软件开发过程当中，程序员经常需要同时操作多个终端窗口。不论是编写代码、运行测试、监控日志，还是远程登录服务器，多个窗口的切换不仅繁琐，而且降低了工作效率。&lt;/p&gt;
&lt;p&gt;此时，一个叫作 &lt;strong&gt;Tmux&lt;/strong&gt;（terminal</summary>
        
      
    
    
    
    <category term="科普" scheme="https://pudongping.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="Tmux" scheme="https://pudongping.github.io/tags/Tmux/"/>
    
  </entry>
  
</feed>
